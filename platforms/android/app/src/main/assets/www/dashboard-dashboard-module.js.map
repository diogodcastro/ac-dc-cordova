{"version":3,"sources":["webpack:///./src/app/dashboard/dashboard-routing.module.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/dashboard/dashboard.module.ts","webpack:///./src/app/shared/app-constants.ts","webpack:///./src/app/shared/models/controller.model.ts","webpack:///./src/app/shared/models/windows.model.ts","webpack:///./src/app/shared/services/db.service.ts","webpack:///./src/app/shared/services/windows.service.ts"],"names":[],"mappings":"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","file":"dashboard-dashboard-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { DashboardComponent } from './dashboard.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DashboardComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DashboardRoutingModule {}\r\n","module.exports = \".float-right {\\r\\n  margin-right: 2%;\\r\\n  margin-top: 0%;\\r\\n}\\r\\n\\r\\n.float-left {\\r\\n  margin-right: 5%;\\r\\n}\\r\\n\\r\\n.input {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.label{\\r\\n  margin-right: 1%;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n\\n    <div class=\\\"col-lg-12\\\">\\n      <div class=\\\"card\\\" *ngIf=\\\"addControllerBoolean\\\">\\n        <div class=\\\"card-header\\\">\\n          <button class=\\\"btn btn-info float-right\\\" (click)=\\\"addController()\\\">\\n            Add new Controller\\n          </button>\\n        </div>\\n        <div class=\\\"card-body\\\" *ngIf=\\\"addFormBoolean\\\">\\n          <form [formGroup]=\\\"newControllerForm\\\">\\n            <table class=\\\"table\\\">\\n              <thead>\\n                <tr>\\n                  <td>Name</td>\\n                  <td>IP</td>\\n                  <td>Save</td>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                <tr>\\n                  <td><input type=\\\"text\\\" formControlName=\\\"name\\\"></td>\\n                  <td><input type=\\\"text\\\" formControlName=\\\"ip\\\"></td>\\n                  <td><button class=\\\"btn btn-info\\\" (click)=\\\"addNewController()\\\">Save</button></td>\\n                </tr>\\n              </tbody>\\n            </table>\\n          </form>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-lg-12\\\">\\n      <div *ngFor=\\\"let controller of controllers\\\">\\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header\\\">\\n\\n            <form [formGroup]=\\\"newControllerForm\\\">\\n\\n              <div class=\\\"float-left\\\">\\n                <input id=\\\"inputName\\\" class=\\\"input\\\" [value]=\\\"controller.name\\\" type=\\\"text\\\"\\n                  formControlName=\\\"name\\\" required=\\\"true\\\">\\n              </div>\\n              <div class=\\\"float-none\\\">\\n                <label class=\\\"label\\\" for=\\\"inputIP\\\">IP : </label>\\n                <input id=\\\"inputIP\\\" class=\\\"input\\\" [value]=\\\"controller.ip\\\" type=\\\"text\\\"\\n                  formControlName=\\\"ip\\\" required=\\\"true\\\">\\n              </div>\\n            </form>\\n\\n            <a class=\\\"float-right\\\" *ngIf=\\\"saveDeleteBoolean\\\" (click)=\\\"deleteController(controller)\\\"><img\\n                src=\\\"assets/images/delete-button.png\\\"></a>\\n            <a class=\\\"float-right\\\" *ngIf=\\\"saveDeleteBoolean\\\" (click)=\\\"updateControllerInfo(controller)\\\"><img\\n                src=\\\"assets/images/save-button.png\\\"></a>\\n            <a class=\\\"float-right\\\" (click)=\\\"editController(editControllerBoolean)\\\"><img src=\\\"assets/images/edit-button.png\\\"></a>\\n\\n          </div>\\n          <div class=\\\"card-body\\\">\\n            <table class=\\\"table\\\">\\n\\n              <thead>\\n                <tr>\\n                  <th>Id</th>\\n                  <th>Name</th>\\n                  <th>Status</th>\\n                  <th>Change</th>\\n                  <th *ngIf=\\\"saveDeleteBoolean\\\"></th>\\n                </tr>\\n              </thead>\\n              <tbody *ngFor=\\\"let windows of controller['windows']\\\">\\n                <tr>\\n                  <td>{{windows.id}}</td>\\n                  <td>\\n                    <input class=\\\"input\\\" type=\\\"text\\\" [(ngModel)]=\\\"windows.name\\\" [disabled]=\\\"!saveDeleteBoolean\\\"></td>\\n                  <td>{{windows.status}}</td>\\n                  <td>\\n                    <ui-switch [checked]=\\\"windows.status\\\" (change)=\\\"changeWindowsStatus = !changeWindowsStatus\\\"\\n                      (click)=\\\"changeStatus(windows, controller)\\\"></ui-switch>\\n                  </td>\\n                  <td *ngIf=\\\"saveDeleteBoolean\\\">\\n                    <a class=\\\"float-right\\\" (click)=\\\"deleteWindows(windows, controller)\\\"><img\\n                        src=\\\"assets/images/delete-button.png\\\"></a>\\n                    <a class=\\\"float-right\\\" (click)=\\\"updateWindows(controller)\\\"><img\\n                          src=\\\"assets/images/save-button.png\\\"></a>\\n                  </td>\\n                </tr>\\n\\n              </tbody>\\n\\n            </table>\\n\\n            <div class=\\\"card\\\" *ngIf=\\\"controller.windows?.length < 5\\\">\\n              <div class=\\\"card-header\\\">\\n                <button class=\\\"btn btn-info float-right\\\" (click)=\\\"addWindowsController()\\\">Add new\\n                  Window</button>\\n              </div>\\n              <div class=\\\"card-body\\\" *ngIf=\\\"addWindowsBoolean\\\">\\n                <form [formGroup]=\\\"newFormWindows\\\">\\n                  <table class=\\\"table\\\">\\n                    <thead>\\n                      <tr>\\n                        <td>Name</td>\\n                        <td>Status</td>\\n                        <td>Save</td>\\n                      </tr>\\n                    </thead>\\n                    <tbody>\\n\\n                      <tr>\\n                        <td>\\n                          <input type=\\\"text\\\" formControlName=\\\"name\\\">\\n                        </td>\\n                        <td>\\n                          <ui-switch [checked]=\\\"newWindowsCheck\\\"></ui-switch>\\n                        <td><button class=\\\"btn btn-info\\\" (click)=\\\"addNewWindows(controller)\\\">Save</button></td>\\n                      </tr>\\n                    </tbody>\\n                  </table>\\n                </form>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Windows } from './../shared/models/windows.model';\nimport { WindowsService } from '../shared/services/windows.service';\nimport { DbService } from './../shared/services/db.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Controller } from '../shared/models/controller.model';\nimport { FormGroup, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n  public addWindowsBoolean: Boolean = false;\n  public newWindowsCheck: Boolean = false;\n\n  public editControllerBoolean: Boolean = false;\n  public saveDeleteBoolean: Boolean = false;\n\n  public addControllerBoolean: Boolean = false;\n  public addFormBoolean: Boolean = false;\n\n  public changeWindowStatus: Boolean = null;\n\n  public controllers: Controller[];\n\n  public newWindows: Windows;\n  public newController: Controller;\n\n  newControllerForm = new FormGroup({\n    name: new FormControl(),\n    ip: new FormControl()\n  });\n\n  newFormWindows = new FormGroup({\n    name: new FormControl(''),\n    status: new FormControl(this.newWindowsCheck)\n  });\n\n  constructor(private dbService: DbService, private windowsService: WindowsService) {}\n\n  ngOnInit() {\n    this.getControllers();\n    this.newControllerForm.controls['name'].disable();\n    this.newControllerForm.controls['ip'].disable();\n  }\n\n  public getControllers(): void {\n    this.dbService.getAllControllers().subscribe((response: Controller[]) => {\n      this.controllers = response;\n      if (this.controllers.length < 5) {\n        this.addControllerBoolean = true;\n      }\n    });\n  }\n\n  public updateController(controller: Controller): void {\n    this.dbService.updateController(controller).subscribe((response: any) => response);\n  }\n\n  public changeStatus(windows: Windows, controller: Controller) {\n    this.changeWindowStatus = windows.status;\n\n    if (this.changeWindowStatus === false) {\n      //this.openWindow();\n      windows.status = true;\n    } else {\n      //this.closeWindow();\n      windows.status = false;\n    }\n    this.updateController(controller);\n  }\n\n  public addNewWindows(controller: Controller): void {\n    this.newWindows = new Windows(\n      controller.windows.length + 1,\n      this.newFormWindows.get('name').value,\n      this.newWindowsCheck\n    );\n\n    controller.windows.push(this.newWindows);\n    this.updateController(controller);\n    location.reload();\n  }\n\n  public openWindows(): void {\n    this.windowsService.openWindows().subscribe((response: any) => response);\n  }\n  public closeWindow(): void {\n    this.windowsService.closeWindows().subscribe((response: any) => response);\n  }\n\n  public addWindowsController(): void {\n    this.addWindowsBoolean = !this.addWindowsBoolean;\n  }\n\n  public addController(): void {\n    this.addFormBoolean = !this.addFormBoolean;\n    if (this.editControllerBoolean === false) {\n      this.editController(this.editControllerBoolean);\n    }\n  }\n\n  public addNewController(): void {\n    this.newController = new Controller(\n      null,\n      this.newControllerForm.get('name').value,\n      this.newControllerForm.get('ip').value\n    );\n\n    if (\n      this.newControllerForm.get('name').value != null &&\n      this.newControllerForm.get('ip').value != null\n    ) {\n      this.dbService.newController(this.newController).subscribe((data: any) => {\n        location.reload();\n      });\n    }\n  }\n\n  public editController(status: Boolean): void {\n    if (status === true) {\n      this.newControllerForm.controls['name'].disable();\n      this.newControllerForm.controls['ip'].disable();\n      this.editControllerBoolean = false;\n      this.saveDeleteBoolean = false;\n    } else {\n      this.newControllerForm.controls['name'].enable();\n      this.newControllerForm.controls['ip'].enable();\n      this.editControllerBoolean = true;\n      this.saveDeleteBoolean = true;\n    }\n  }\n\n  public updateControllerInfo(controller: Controller): void {\n    if (this.newControllerForm.get('name').value != null) {\n      controller.name = this.newControllerForm.get('name').value;\n    }\n    if (this.newControllerForm.get('ip').value != null) {\n      controller.ip = this.newControllerForm.get('ip').value;\n    }\n    this.updateController(controller);\n    location.reload();\n  }\n\n  public updateWindows(controller: Controller): void {\n    this.updateController(controller);\n    location.reload();\n }\n\n  public deleteController(controller: Controller): void {\n    this.dbService.deleteController(controller).subscribe((data: any) => {\n      location.reload();\n    });\n  }\n\n  public deleteWindows(windows: Windows, controller: Controller): void {\n    let i = 1;\n    controller.windows.splice(controller.windows.indexOf(windows), 1);\n\n    controller.windows.forEach(item => {\n      item.id = i;\n      i++;\n    });\n    this.updateController(controller);\n  }\n}\n","import { DbService } from './../shared/services/db.service';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DashboardComponent } from './dashboard.component';\r\nimport { DashboardRoutingModule } from './dashboard-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { WindowsService } from '../shared/services/windows.service';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DashboardRoutingModule,\r\n    SharedModule\r\n  ],\r\n  declarations: [DashboardComponent],\r\n  providers: [DbService, WindowsService],\r\n  exports: []\r\n})\r\nexport class DashboardModule {}\r\n","export const APP_URI = 'http://192.168.4.1';\r\n\r\nexport const APP_DB = 'http://localhost:3000';\r\n","import { Windows } from './windows.model';\r\nexport class Controller {\r\n  constructor(\r\n    public id?: number,\r\n    public name: string = null,\r\n    public ip: string = null,\r\n    public windows: Windows[] = new Array<Windows>()\r\n  ) {}\r\n}\r\n","export class Windows {\r\n  constructor(public id?: number,\r\n              public name: string = null,\r\n              public status: Boolean = null) { }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as Constants from './../app-constants';\r\nimport { map } from 'rxjs/operators';\r\nimport { Windows } from '../models/windows.model';\r\nimport { Controller } from '../models/controller.model';\r\n\r\n@Injectable()\r\nexport class DbService {\r\n  private endpoint: string = 'controller';\r\n\r\n  constructor(private httpService: HttpClient) {}\r\n\r\n  public getController(controlerId: string): Observable<Controller> {\r\n    return this.httpService\r\n      .get<Controller[]>(`${Constants.APP_DB}/${this.endpoint}/${controlerId}`)\r\n      .pipe(\r\n        map((response: any) => {\r\n          return response;\r\n        })\r\n      );\r\n  }\r\n  public getAllControllers(): Observable<[Controller]> {\r\n    return this.httpService.get(`${Constants.APP_DB}/${this.endpoint}`).pipe(\r\n      map((response: [Controller]) => {\r\n        return response;\r\n      })\r\n    );\r\n  }\r\n  public newController(controller: Controller): Observable<Controller> {\r\n    return this.httpService\r\n      .post(`${Constants.APP_DB}/${this.endpoint}`, controller)\r\n      .pipe(map((response: Controller) => response));\r\n  }\r\n\r\n  public updateController(controller: Controller): Observable<Controller> {\r\n    let headers = new HttpHeaders();\r\n    headers.append('Content-type', 'application/json');\r\n    return this.httpService\r\n      .put<Controller>(`${Constants.APP_DB}/${this.endpoint}/${controller.id}`, controller, {\r\n        headers: headers\r\n      })\r\n      .pipe(map((response: Controller) => response));\r\n  }\r\n\r\n  public deleteController(controller: Controller): Observable<Controller> {\r\n    return this.httpService\r\n      .delete<Controller>(`${Constants.APP_DB}/${this.endpoint}/${controller.id}`)\r\n      .pipe(map((response: any) => response));\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as Constants from '../app-constants';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class WindowsService {\r\n  private endpoint: String = 'windows';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  public getWindows(): Observable<any> {\r\n    console.log(`${Constants.APP_URI}/${this.endpoint}/open`);\r\n    return this.http.get<any>(`${Constants.APP_URI}/${this.endpoint}/open`).pipe(\r\n      map((response: any) => {\r\n        console.log('here', response);\r\n        return response;\r\n      })\r\n    );\r\n  }\r\n\r\n  public openWindows(): Observable<any> {\r\n    console.log(`${Constants.APP_URI}/${this.endpoint}/open`);\r\n    return this.http.get<any>(`${Constants.APP_URI}/${this.endpoint}/open`);\r\n  }\r\n\r\n  public closeWindows(): Observable<any> {\r\n    console.log(`${Constants.APP_URI}/${this.endpoint}/close`);\r\n    return this.http.get<any>(`${Constants.APP_URI}/${this.endpoint}/close`);\r\n  }\r\n\r\n}\r\n"],"sourceRoot":""}